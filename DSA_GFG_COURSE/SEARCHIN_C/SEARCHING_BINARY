============================INDEX OF 1ST OCCURRENCE IN SORTED
int findFirst(int *arr,int n,int key)
{
    int low=0,high=(n-1),mid;    
    while(low<=high)
    {
        mid=(low+high)/2;
        
        if(arr[mid]==key && (mid==0 || key>arr[mid-1]))
        {
            return mid;
        }
        else if(arr[mid]==key && arr[mid-1]==key)
        {
            high=mid-1;;
        }
        else if(key>arr[mid])
        {
            low=mid+1;
        }
        else if(key<arr[mid])
        {
            high=mid-1;
        }
    }    
    return -1;
}
int main()
{
    int arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125};
    int n=sizeof(arr)/sizeof(arr[0]),key=5;
    
    printf("%d",findFirst(arr,n,key));
}   ORRR
int findFirst(int *arr,int n,int key)
{
    int low=0,high=(n-1),mid;
    
    while(low<=high)
    {
        mid=(low+high)/2;
        
        if(key>arr[mid])
        {
            low=mid+1;
        }
        else if(key<arr[mid])
        {
            high=mid-1;
        }
        else if(arr[mid]==key)
        {
            if(mid==0 || arr[mid]!=arr[mid-1])
            {
                return mid;
            }
            else
            {
                high=mid-1;
            }
        }
    }    
    return -1;
}
============================INDEX OF 1ST OCCURRENCE IN SORTED -- RECURSIVE METHOD
#include <stdio.h>
int findFirst(int *arr,int low,int high,int key)
{
   if(low>high)
   {
       return -1;
   }
   int mid=(low+high)/2;
    if(arr[mid]<key)
    {
        return findFirst(arr,mid+1,high,key);
    }
    else if(arr[mid]>key)
    {
        return findFirst(arr,low,mid-1,key);
    }
    else
    {
        if(mid==0 || arr[mid]!=arr[mid-1])
        {
            return mid;
        }
        else
        {
            return findFirst(arr,low,mid-1,key);
        }
    }
}
int main()
{
    int arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125};
    int n=sizeof(arr)/sizeof(arr[0]),key=5;    
    printf("%d",findFirst(arr,0,n-1,key));
}
=======================Index of LAST Occurrence in Sorted --RECURSIVE
#include <stdio.h>
int findFirst(int *arr,int n,int low,int high,int key)
{
   if(low>high)
   {
       return -1;
   }
   int mid=(low+high)/2;
    if(arr[mid]<key)
    {
        return findFirst(arr,n,mid+1,high,key);
    }
    else if(arr[mid]>key)
    {
        return findFirst(arr,n,low,mid-1,key);
    }
    else
    {
        if(mid==(n-1) || arr[mid]!=arr[mid+1])
        {
            return mid;
        }
        else
        {
            return findFirst(arr,n,mid+1,high,key);
        }
    }
}
int main()
{
    int arr[] = {1, 3, 5, 45, 47, 55, 67, 67, 125};
    int n=sizeof(arr)/sizeof(arr[0]),key=67;    
    printf("%d",findFirst(arr,n,0,n-1,key));
}
=======================Index of LAST Occurrence in Sorted --ITERATIVE
#include <stdio.h>
int findFirst(int *arr,int n,int key)
{
   
        int low=0,high=n-1,mid;
        
        while(low<=high)
        {
            mid=(low+high)/2;
            if(arr[mid]>key)
            {
                high=mid-1;
            }
            else if(arr[mid]<key)
            {
                low=(mid+1);
            }
            else
            {
                if(mid==n-1 || (arr[mid]!=arr[mid+1]))
                {
                    return mid;
                }
                else
                {
                    low=(mid+1);
                }
            }
        }
}

int main()
{
    int arr[] = {1, 3, 5, 45, 47, 67, 67, 67, 80}; // 9 elements
    int n=sizeof(arr)/sizeof(arr[0]),key=67;
    
    printf("%d",findFirst(arr,n,key));
}

