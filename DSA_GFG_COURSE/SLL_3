#include <stdio.h>
#include <stdlib.h>
struct Node{
    int data;
    struct Node *next;
};

struct Node* createNode(int val)
{
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=val;
    newNode->next=NULL;
    printf("%p ",newNode);
    return newNode;
}

struct Node* insertAtFront(struct Node *head, int val)
{
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=val;
    newNode->next=head;
    return newNode;
}

struct Node* AtEnd(struct Node *temp,int val)
{
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=val;
    
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=newNode;
    newNode->next=NULL;
    
}
void traverseList(struct Node *temp)
{
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    
    
}
int main()
{
   struct Node *head=createNode(10);
   printf("%p ",head);
   head->next=createNode(20);
   printf("%p ",head->next);
   head->next->next=createNode(30);
   printf("%p ",head->next->next);
   head->next->next->next=createNode(40);
   printf("%p ",head->next->next->next);
   
   // Print the original list
    printf("Original Linked List:");
   traverseList(head);
   // Print a newline at the end
    printf("\n");
   // Insert a new node at the front of the list
    printf("After inserting Nodes at the front:");
    head=insertAtFront(head,5);
    
    // Insert a new node at the END of the list
    printf("After inserting Nodes at the END:");
    AtEnd(head,66);
    
    //print the updated list
    traverseList(head);   
    
}
========================WITH GENERALIZED APPROACH
#include <stdio.h>
#include <stdlib.h>
struct Node{
    int data;
    struct Node *next;
};
struct Node* createNode(int n){
    struct Node *temp2;
    int new_data;
    struct Node *head=(struct Node*)malloc(sizeof(struct Node));
    printf("Enter data for node 1");
     scanf("%d",&new_data);
    head->data=new_data;
    head->next=NULL;
    temp2=head;    
    for(int i=1;i<n;i++)
    {
    printf("Enter data for node %d",1+i);
     scanf("%d",&new_data);
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=new_data;
    
    newNode->next=NULL;
    temp2->next=newNode;
    temp2=temp2->next;
    }
    return head;
}
void printList(struct Node *head)
{
    struct Node *temp=head;
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
}
int main()
{
   int num;
   printf("Enter the no. of nodes of the LL.");
    scanf("%d",&num);
    struct Node *head=createNode(num);    
    printList(head);
    return 0;
}

====================REVERSING LL IN GENERALIZED MANNER
#include <stdio.h>
#include <stdlib.h>


struct Node{
    int data;
    struct Node *next;
};

struct Node* createNode(int n){
    struct Node *temp2;
    int new_data;
    struct Node *head=(struct Node*)malloc(sizeof(struct Node));
    printf("Enter data for node 1");
     scanf("%d",&new_data);
    head->data=new_data;
    head->next=NULL;
    temp2=head;
    
    for(int i=1;i<n;i++)
    {
    printf("Enter data for node %d",1+i);
     scanf("%d",&new_data);
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=new_data;
    
    newNode->next=NULL;
    temp2->next=newNode;
    temp2=temp2->next;
    }
    return head;
}

void printList(struct Node *head)
{
    struct Node *temp=head;
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
}

struct Node* ReverseList(struct Node *head)
{
    struct Node *prev,*curr,*Next;
    
    prev=NULL;
    curr=head;
    
    
    while(curr!=NULL)
    {
        Next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=Next;
    }
    head=prev;
    return head;
    
}
int main()
{
   int num;
   printf("Enter the no. of nodes of the LL.");
    scanf("%d",&num);
    struct Node *head=createNode(num);
    
    printList(head);
    
    head=ReverseList(head);
    printf("\n");
    printList(head);
    return 0;
}
==========================
#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *next;
};

struct Node*  CreateLL(int n)
{
    int val;
    printf("Enter the data of the 1st node-");
    scanf("%d",&val);
    struct Node *head=(struct Node*)malloc(sizeof(struct Node));
    head->data=val;
    head->next=NULL;
    struct Node *temp=head;
    
    int i=1;
    while(i<n)
    {
        printf("Enter the data of node %d-",i+1);
    scanf("%d",&val);
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=val;
    newNode->next=NULL;
    temp->next=newNode;
    temp=temp->next;
    i++;
    }
    return head;
    
    
}

struct Node* ReverseLL(struct Node *head)
{
    struct Node *prev,*curr,*Nxt;
    prev=NULL;
    curr=head;
    
    while(curr!=NULL)
    {
        Nxt=curr->next;
        curr->next=prev;
        prev=curr;
        curr=Nxt;
    }
    head=prev;
    return head;
}
struct Node* insertNode(struct Node *head)
{
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    int val,val1;
    printf("Enter the data of the new node-");
    scanf("%d",&val);
    newNode->data=val;
    newNode->next=head;
    head=newNode;
    
    struct Node *newNode1=(struct Node*)malloc(sizeof(struct Node));
    
    printf("Enter the data of the new node added at end.-");
    scanf("%d",&val1);
    newNode1->data=val1;
    newNode1->next=NULL;
    struct Node *tmp=head;
    while(tmp->next!=NULL)
    {
        tmp=tmp->next;
    }
    tmp->next=newNode1;
    
    return head;
}

struct Node* SortedInsert(struct Node *head,int pos)
{
    int val;
    printf("Enter the data of the new node that needs to be inserted in between.-");
    scanf("%d",&val);
    struct Node *tmp=head;
    
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    if(pos==1)
    {
        newNode->data=val;
        newNode->next=head;
        head=newNode;
        return head;
    }
    else {
        
        while(pos-2)
        {
            
            tmp=tmp->next;
            pos--;
        }
        newNode->data=val;
        newNode->next=tmp->next;
        tmp->next=newNode;
        return head;
    }
}
void printList(struct Node *tmp)
{
    while(tmp!=NULL)
    {
        printf("%d->",tmp->data);
        tmp=tmp->next;
    }
}
int main()
{
    int num,pos;
    printf("Enter the no. of nodes for the LL-");
    scanf("%d",&num);
    struct Node *head=(struct Node*)malloc(sizeof(struct Node));
    head=CreateLL(num);
    
    head=ReverseLL(head);
    
    head=insertNode(head);
    pos=1;
    head=SortedInsert(head,pos);
    printList(head);
    
}
===============
#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *next;
};

struct Node*  CreateLL(int n)
{
    int val;
    printf("Enter the data of the 1st node-");
    scanf("%d",&val);
    struct Node *head=(struct Node*)malloc(sizeof(struct Node));
    head->data=val;
    head->next=NULL;
    struct Node *temp=head;
    
    int i=1;
    while(i<n)
    {
        printf("Enter the data of node %d-",i+1);
    scanf("%d",&val);
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=val;
    newNode->next=NULL;
    temp->next=newNode;
    temp=temp->next;
    i++;
    }
    return head;
    
    
}

struct Node* ReverseLL(struct Node *head)
{
    struct Node *prev,*curr,*Nxt;
    prev=NULL;
    curr=head;
    
    while(curr!=NULL)
    {
        Nxt=curr->next;
        curr->next=prev;
        prev=curr;
        curr=Nxt;
    }
    head=prev;
    return head;
}
struct Node* insertNode(struct Node *head)
{
    struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
    int val,val1;
    printf("Enter the data of the new node to be added at beginning,-");
    scanf("%d",&val);
    newNode->data=val;
    newNode->next=head;
    head=newNode;
    
    struct Node *newNode1=(struct Node*)malloc(sizeof(struct Node));
    
    printf("Enter the data of the new node added at end.-");
    scanf("%d",&val1);
    newNode1->data=val1;
    newNode1->next=NULL;
    struct Node *tmp=head;
    while(tmp->next!=NULL)
    {
        tmp=tmp->next;
    }
    tmp->next=newNode1;
    
    return head;
}

struct Node* DelNode(struct Node *head,int pos)
{
    struct Node *temp=head;
    
    while(pos-2)
    {
        temp=temp->next;
        pos--;
    }
    struct Node *temp2=temp->next;
    temp->next=temp->next->next;
    free(temp2);
    return head;
    
}
void printList(struct Node *tmp)
{
    while(tmp!=NULL)
    {
        printf("%d->",tmp->data);
        tmp=tmp->next;
    }
}
int main()
{
    int num,pos;
    printf("Enter the no. of nodes for the LL-");
    scanf("%d",&num);
    struct Node *head=(struct Node*)malloc(sizeof(struct Node));
    head=CreateLL(num);
    
    head=ReverseLL(head);
    
    head=insertNode(head);
    printf("OG LL is-");
    printList(head);
    pos=3;
    head=DelNode(head,pos);
    printf("Modified LL is-");
    printList(head);
    
}
