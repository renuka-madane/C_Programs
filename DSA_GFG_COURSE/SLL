...........................CREATING SLL, ADD NODE AT START AND END OF SLL
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};
int main()
{
    struct node *head,*mid1,*mid2,*mid3,*last;
    head=(struct node*)malloc(sizeof(struct node));
    mid1=(struct node*)malloc(sizeof(struct node));
    mid2=(struct node*)malloc(sizeof(struct node));
    mid3=(struct node*)malloc(sizeof(struct node));
    last=(struct node*)malloc(sizeof(struct node));
    
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=NULL;    
    struct node*temp=head;
    printf("OG LINKED LIST.");
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }    
    struct node *NewNode=(struct node*)malloc(sizeof(struct node));
    NewNode->data=66;
    NewNode->next=head;
    head=NewNode;
    printf("\n");
    printf("LL after adding new node at the starting.");
    temp=head;
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    printf("\n");
    printf("LL after adding new node at END.");
    struct node *NewNode_end=(struct node*)malloc(sizeof(struct node));
    NewNode_end->data=33;    
    temp=head;    
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=NewNode_end;
    NewNode_end->next=NULL;
    
    struct node *temp2=head;
    while(temp2!=NULL)
    {
        printf("%d->",temp2->data);
        temp2=temp2->next;
    }   
    
}
.................INSERT AT GIVEN POS
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};
int main()
{
    struct node *head,*mid1,*mid2,*mid3,*last;
    head=(struct node*)malloc(sizeof(struct node));
    mid1=(struct node*)malloc(sizeof(struct node));
    mid2=(struct node*)malloc(sizeof(struct node));
    mid3=(struct node*)malloc(sizeof(struct node));
    last=(struct node*)malloc(sizeof(struct node));
    
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=NULL;
    
    struct node*temp=head;
    printf("OG LINKED LIST.");
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    
    int pos=4;
    struct node *NewNode=(struct node*)malloc(sizeof(struct node));
    temp=head;
    
    while(pos-2)
    {
        temp=temp->next;
        pos--;
    }
    NewNode->data=44;
    NewNode->next=temp->next;
    temp->next=NewNode;
    struct node*temp2=head;
    printf(" ADD AT POS LINKED LIST.");
    while(temp2!=NULL)
    {
        printf("%d->",temp2->data);
        temp2=temp2->next;
    }
    
}
****************************************INSERT IN A SORTED LL
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};
int main()
{
    struct node *head,*mid1,*mid2,*mid3,*last;
    head=(struct node*)malloc(sizeof(struct node));
    mid1=(struct node*)malloc(sizeof(struct node));
    mid2=(struct node*)malloc(sizeof(struct node));
    mid3=(struct node*)malloc(sizeof(struct node));
    last=(struct node*)malloc(sizeof(struct node));
    
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=NULL;
    
    struct node  *temp=head;
    printf("OG LINKED LIST.");
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    
    struct node *NewNode=(struct node*)malloc(sizeof(struct node));
    int var=45;
    printf("\n");
    struct node *temp2=head;
    NewNode->data=var;
    if(head->data>var)  //if new node data is less than head node itself, no needs to be added at the start
    {
        NewNode->next=head;
        head=NewNode;
        
    }
    else
    {
         while(temp2->next->data<var)
    {
        temp2=temp2->next;
    }
    NewNode->data=var;
    NewNode->next=temp2->next;
    temp2->next=NewNode;    
    }  
    temp=head;
    printf("AFter sorted insertion LINKED LIST.");
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }    
    
}
********************************DELETE 1ST AND LAST NODE OF SLL
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};
int main()
{
    struct node *head,*mid1,*mid2,*mid3,*last;
    head=(struct node*)malloc(sizeof(struct node));
    mid1=(struct node*)malloc(sizeof(struct node));
    mid2=(struct node*)malloc(sizeof(struct node));
    mid3=(struct node*)malloc(sizeof(struct node));
    last=(struct node*)malloc(sizeof(struct node));
    
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=NULL;
    
    struct node  *temp=head;
    printf("OG LINKED LIST.");
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    printf("\n");
    printf("LL AFTER DELETING 1ST NODE.");
    
    struct node *temp2;
    temp2=head;
    head=head->next;
    free(temp2);
    
    temp=head;
    
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
   printf("\n");
    printf("LL AFTER DELETING LAST NODE.");
    
   temp=head;
    
    while(temp->next->next!=NULL)
    {
        temp=temp->next;
    }
    free(temp->next->next);
    temp->next=NULL;
    
    
    struct node *temp3=head;
    while(temp3!=NULL)
    {
        printf("%d->",temp3->data);
        temp3=temp3->next;
    }
     printf("To count the no. of nodes.");
    temp=head;
    int count=1;
    while(temp->next!=NULL)
    {
        temp=temp->next;
        count++;
    }
    printf("%d ",count);
}
printf("To search in a LL.");
    temp=head;
    int count=40;
    while(temp->next!=NULL)
    {
        if(temp->data=count)
        {
            printf("YES.");
            break;
        }
    }
 printf("To delete a node  in a LL.");
     struct node *curr;
    temp=head;
    int pos=3;
    while(pos-1)
    {
        curr=temp;
        temp=temp->next;
        pos--;
    }
    curr->next=temp->next;
    free(temp);
    struct node *temp1=head;
    while(temp1!=NULL)
    {
        printf("%d ",temp1->data);
        temp1=temp1->next;
    }
******************************TO CHECK IF LL IS SORTED.
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};

int main()
{
   struct node *head,*mid1,*mid2,*mid3,*last;
   head=(struct node*)malloc(sizeof(struct node));
   mid1=(struct node*)malloc(sizeof(struct node));
   mid2=(struct node*)malloc(sizeof(struct node));
   mid3=(struct node*)malloc(sizeof(struct node));
   last=(struct node*)malloc(sizeof(struct node));   
   head->data=10;
   mid1->data=20;
   mid2->data=3;
   mid3->data=40;
   last->data=50;   
   head->next=mid1;
   mid1->next=mid2;
   mid2->next=mid3;
   mid3->next=last;   
   struct node *temp;
   temp=head;
   while(temp!=NULL)
   {
       printf("%d->",temp->data);
       temp=temp->next;
   }
   int is_sorted=1;   
   temp=head;
   printf("\n");
   while(temp->next!=NULL&& temp!=NULL)
   {
       if(temp->next->data<temp->data)
       {
           is_sorted=0;
           
       }
       temp=temp->next;
   }   
   if(is_sorted==1)
   {
       printf("LL is sorted.");
   }
   else
   {
       printf("LL is not sorted.");
   }     
}
*******************TO DELETE DUPLICATES IN A SORTED LL
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};

int main()
{
   struct node *head,*mid1,*mid2,*mid3,*last;
   head=(struct node*)malloc(sizeof(struct node));
   mid1=(struct node*)malloc(sizeof(struct node));
   mid2=(struct node*)malloc(sizeof(struct node));
   mid3=(struct node*)malloc(sizeof(struct node));
   last=(struct node*)malloc(sizeof(struct node));
   
   head->data=10;
   mid1->data=10;
   mid2->data=30;
   mid3->data=40;
   last->data=50;
   
   head->next=mid1;
   mid1->next=mid2;
   mid2->next=mid3;
   mid3->next=last;
   
   struct node *temp,*curr;
   temp=head;
   while(temp!=NULL)
   {
       printf("%d->",temp->data);
       temp=temp->next;
   }
   
   temp=head;
   printf("\n");
   while(temp!=NULL&&temp->next!=NULL)
   {
       if(temp->data==temp->next->data)
       {
           curr=temp->next;
           temp->next=temp->next->next;
           free(curr);
       }
       temp=temp->next;
   }
   struct node *temp2=head;
   while(temp2!=NULL)
   {
       printf("%d->",temp2->data);
       temp2=temp2->next;
   }
}
*************************Kth from End of Linked List
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *next;
};

int main()
{
   struct node *head,*mid1,*mid2,*mid3,*last;
   head=(struct node*)malloc(sizeof(struct node));
   mid1=(struct node*)malloc(sizeof(struct node));
   mid2=(struct node*)malloc(sizeof(struct node));
   mid3=(struct node*)malloc(sizeof(struct node));
   last=(struct node*)malloc(sizeof(struct node));
   
   head->data=10;
   mid1->data=10;
   mid2->data=30;
   mid3->data=40;
   last->data=50;
   
   head->next=mid1;
   mid1->next=mid2;
   mid2->next=mid3;
   mid3->next=last;
   
   struct node *temp,*curr;
   temp=head;
   int n=0,k=3;
   while(temp!=NULL)
   {
       printf("%d->",temp->data);
       temp=temp->next;
       n++;
   }
   printf("\n");
   printf("%d ",n);
   temp=head;
   int count=n-k; //5-2=3
   while(count)
   {
       temp=temp->next;
       count--;
   }
   printf("%d",temp->data);   
}
*************************SLL REVERSAL ITERATIVE
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};
int main()
{
    struct node *head,*mid1,*mid2,*mid3,*last;
    head=(struct node*)malloc(sizeof(struct node));
    mid1=(struct node*)malloc(sizeof(struct node));
    mid2=(struct node*)malloc(sizeof(struct node));
    mid3=(struct node*)malloc(sizeof(struct node));
    last=(struct node*)malloc(sizeof(struct node));
    
   head->data=10;
   mid1->data=20;
   mid2->data=30;
   mid3->data=40;
   last->data=50;
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=NULL;
    
    struct node *temp=head;
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    struct node *prev,*curr,*next;
    prev=NULL;
    curr=head;
    next=NULL;
    
    while(curr!=NULL)
    {
        next=curr->next; //store next pointer first
        curr->next=prev; // reverse current nodes pointer
        //move pointers one position ahead.
        prev=curr;
        curr=next;
        
    }
    head=prev;
    temp=head;
    printf("\n");
    printf("LL after reversing the nodes is.");
    while(temp!=NULL)
    {
        printf("%d->",temp->data);
        temp=temp->next;
    }
    
}
