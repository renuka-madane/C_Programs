













******************************CODES
#include <stdio.h>
int main()
{    
    int i=1,2,3;
    printf("%d",i);
}
expected identifier or ‘(’ before numeric constant
   14 |     int i=1,2,3;
==================
#include <stdio.h>
int main()
{   int i;
    i=1,2,3;
    printf("%d",i);
} ANS  1-->> the assignment operator has higher precedence than , operator.so exp becomes (i=1),2,3.
=============
#include <stdio.h>
int foo(int* a, int* b)
{
    int sum = *a + *b;
    *b = *a;
    return *a = sum - *b;
}
int main()
{
    int i = 0, j = 1, k = 2, l;
    l = i++ || foo(&j, &k);
    printf("%d %d %d %d", i, j, k, l);
    return 0;
}
==============
#include <stdio.h>
int main()
{
    //Assume sizeof character is 1 byte and sizeof integer is 4 bytes
    printf("%d", sizeof(printf("GeeksQuiz")));
    return 0;
}  ANSW- 4, anything inside sizeof doesnt get evaluated. printf return only 9, doesnt print anything, sizeof an int 9here is 4.
===================
#include <stdio.h> 
int main() 
{ 
  int a = 10, b = 20, c = 30; 
  if (c > b > a) 
    printf("TRUE"); 
  else
    printf("FALSE"); 
  return 0; 
}ANS-- 
Let us consider the condition inside the if statement. Since there are two greater than (>) operators in the expression “c > b > a”, 
associativity of > is considered. Associativity of > is left to right. So, expression c > b > a is evaluated as ( (c > b) > a ). 
And since the (c > b) is being the relational operator it will return 1 if True otherwise 0 is if False. So here the value returned is 1 
and then it is compared to the a. so now, the statement becomes, (1 > a),
which is false, so the answer, return is 0, therefore, else part is executed.
==============
#include <stdio.h>
int main()
{
    int i = 12;
    int j = sizeof(i++);
    printf("%d  %d", i, j);
    return 0;
} ANS== 12,4 exp written inside sizeof are not evaluated so i++ is not performed.
================
#include <stdio.h>
int main()
{
   int a = 0;
   int b;
   a = (a == (a == 1));
   printf("%d", a);
   return 0;
} ANW = 0
=============
#include "stdio.h"
int main() 
{ 
  int x, y = 5, z = 5; 
  x = y == z; 
  printf("%d", x); 
  getchar(); 
  return 0; 
}
ANW==1


