The '++' operator is used to increment the value of an integer by one. When placed before the variable name (also called the pre-increment), 
its value is incremented instantly. When it is placed after the variable name (also called the post-increment), its value is incremented
after the evaluation of whole expression.
two values. They evaluate expressions and return Boolean values (true or false), which are represented as 1 (true) and 0 (false) in C. 

Decrement Operator (--)--When placed before the variable name (also called the pre-decrement), its value is decremented instantly. 
When it is placed after the variable name (also called the post-decrement), its value is decremented after the evaluation of whole expression.
Short-circuiting refers to the behavior of logical operators where evaluation stops as soon as the result is determined. In the case of 
logical AND, the second expression/condition is not evaluated if the first expression/condition is false. and in logical OR, 
second expression/condition is not evaluated if the first condition is true.
======================================
#include <stdbool.h>
#include <stdio.h>
int main()
{
	int x = 5;
	bool res = (x++ && x>10);
    printf("%d\n", res);
    printf("%d", x);
	return 0;
} ANS -- 
================================
#include <stdbool.h>
#include <stdio.h>
int main()
{
	int x = 5;
	bool res = (x > 10 && x++);
    printf("%d\n", res);
    printf("%d", x);
	return 0;
}
ANS-- 0 6   First expression is evaluated because it's true expression and AND operator need to check second expression/condition.
============================
#include <stdbool.h>
#include <stdio.h>
int main()
{
	int x = 5;
  	bool res = (x > 2 || x++);
    printf("%d\n", res);
    printf("%d", x);
	return 0;
}
ANW -- 1 5
******************************CODES
#include <stdio.h>
int main()
{    
    int i=1,2,3;
    printf("%d",i);
}
expected identifier or ‘(’ before numeric constant
   14 |     int i=1,2,3;
==================
#include <stdio.h>
int main()
{   int i;
    i=1,2,3;
    printf("%d",i);
} ANS  1-->> the assignment operator has higher precedence than , operator.so exp becomes (i=1),2,3.
=============
#include <stdio.h>
int foo(int* a, int* b)
{
    int sum = *a + *b;
    *b = *a;
    return *a = sum - *b;
}
int main()
{
    int i = 0, j = 1, k = 2, l;
    l = i++ || foo(&j, &k);
    printf("%d %d %d %d", i, j, k, l);
    return 0;
}
==============
#include <stdio.h>
int main()
{
    //Assume sizeof character is 1 byte and sizeof integer is 4 bytes
    printf("%d", sizeof(printf("GeeksQuiz")));
    return 0;
}  ANSW- 4, anything inside sizeof doesnt get evaluated. printf return only 9, doesnt print anything, sizeof an int 9here is 4.
===================
#include <stdio.h> 
int main() 
{ 
  int a = 10, b = 20, c = 30; 
  if (c > b > a) 
    printf("TRUE"); 
  else
    printf("FALSE"); 
  return 0; 
}ANS-- 
Let us consider the condition inside the if statement. Since there are two greater than (>) operators in the expression “c > b > a”, 
associativity of > is considered. Associativity of > is left to right. So, expression c > b > a is evaluated as ( (c > b) > a ). 
And since the (c > b) is being the relational operator it will return 1 if True otherwise 0 is if False. So here the value returned is 1 
and then it is compared to the a. so now, the statement becomes, (1 > a),
which is false, so the answer, return is 0, therefore, else part is executed.
==============
#include <stdio.h>
int main()
{
    int i = 12;
    int j = sizeof(i++);
    printf("%d  %d", i, j);
    return 0;
} ANS== 12,4 exp written inside sizeof are not evaluated so i++ is not performed.
================
#include <stdio.h>
int main()
{
   int a = 0;
   int b;
   a = (a == (a == 1));
   printf("%d", a);
   return 0;
} ANW = 0
=============
#include "stdio.h"
int main() 
{ 
  int x, y = 5, z = 5; 
  x = y == z; 
  printf("%d", x); 
  getchar(); 
  return 0; 
}
ANS==1
****************************
#include<stdio.h> 
int main() 
{ 
  char *s[] = { "knowledge","is","power"}; 
  char **p; 
  p = s; 
  printf("%s ", ++*p); 
  printf("%s ", *p++); 
  printf("%s ", ++*p); 
  
  return 0; 
}  for detailed answer refer https://gateoverflow.in/63559/c-program

**************************
#include <stdio.h>
#define VAL 32 
int main()
{
    char arr[] = "geeksquiz";
    *(arr + 0) &= ~VAL;
    *(arr + 5) &= ~VAL;
    printf("%s", arr);    
}
The crux of the question lies in the statement: *(arr + 5) &= ~VAL; This statement subtracts 32 from the ascii value of a lower case character 
and thus converts it to upper case. This is another way to convert an alphabet to upper case by resetting its bit positioned at value 32 i.e.
5th bit from the LSB(assuming LSB bit at position 0).
==================
#include <stdio.h>

int main() {
    int x = 10;
    int y = 20;
    x += y += 10;
    printf("%d %d", x, y);
    return 0;
}
=============
#include <stdio.h>
int main()
{
   int a = 0;
   int b;
   a = (a == (a == 1));
   printf("%d", a);
   return 0;
}
=================
#include "stdio.h"

int main() 

{ 

  int x, y = 5, z = 5; 

  x = y == z; 

  printf("%d", x); 

  getchar(); 

  return 0; 

}  https://edurev.in/question/3294402/Find-the-Output--includeltstdio-hgtint-main--%7B-int-x--y-5--z-5-x-y-z-printf-quot-dquot--x--getchar--
==================================
#include <stdio.h>

int main()
{
    int a=15,b=2;
    printf("Divison is %d ",a/b);
    printf("Modulo is %d",a%b);
} ANS- Divison is 7 Modulo is 1
=============================
#include <stdio.h>
int main() 
{
    int x = 10;
    int y = x++; // y = x; y = x+1;
    int z = ++x; // x = x+1; z = x;
    printf("%d %d %d", x, y, z);
    return 0;
} ANS-- 12 10 12
==============================
#include <stdio.h>
int main() 
{
    int x = 10;
    int y = x--;  // y = x; x = x + 1;
    int z = --x;  // x = x - 1; z = x;
    printf("%d %d %d", x, y, z);
    return 0;
}  ANW-- 8 10 8
