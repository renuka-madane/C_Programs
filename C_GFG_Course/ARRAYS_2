


================PROBLEMS
SEARCH THE GIVEN ELEMENT IN AND ARRAY
#include <stdio.h>

int FindKey(int arr[],int n,int k)
{
    for(int i=0;i<n;i++)
    {
        if(arr[i]==k)
        {
            return i+1;
        }
    }
    return -1;
}

int main()
{
     int arr[] = { 12, 34, 10, 6, 40 };
     
     // Using a last element as search element
    int n=sizeof(arr)/sizeof(arr[0]);
    int key = 10;
    int result=FindKey(arr,n,key);
    
    if(result==-1)
    printf("Element not found");
    else
        printf("Element Found at Position: %d",result);
    
}
***********************
FIND DISTINCT ELMENTS IN AN ARRAY
int distinct(int arr[], int n) {
    int count = 0;
   
    for(int i = 0;i<n;i++)
    {
         int isdistinct = 1;
         for(int j=i+1;j<n;j++)
        {
            if(arr[i]==arr[j])
            {
                isdistinct=0;
                break;
            }
            
        }
        
        if(isdistinct==1)
        {
             count++;
        }
    }
    
    return count;
    // code here
}
int main()
{
    int arr[]={2,5,5,5,5,5,8,5,8,9};
    int n=sizeof(arr)/sizeof(arr[0]);
    printf("%d",distinct(arr,n));
}
*********************************INSERT ELEMENT AT END OF THE ARRAY
int AddLast(int arr[],int n,int k)
{
    arr[n]=k;
    
    for(int i=0;i<=n;i++)
    {
        printf("%d ",arr[i]);
    }
}

int main()
{
     int arr[] = { 12, 34, 10, 6 ,60 ,88 ,4 };
     
     // Using a last element as search element
    int n=sizeof(arr)/sizeof(arr[0]);
    int key = 10;
    AddLast(arr,n,key);
}
****************************INSERT ELEMENT AT GIVEN POSITION IN AN ARRAY
#include <stdio.h>

int AddElement(int arr[],int n,int k,int pos)
{
    for(int i=n;i>=pos;i--)
    {
        arr[i]=arr[i-1];
    }
    
    arr[pos-1]=k;
}

int main()
{
     int arr[] = { 12, 34, 10, 6 ,60 ,88 ,4 };
     
     // Using a last element as search element
    int n=sizeof(arr)/sizeof(arr[0]);
    int key = 10,pos=5;
    
    printf("OG ARRAY IS.");
    
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
    AddElement(arr,n,key,pos);
    
    printf("NEW ARRAY IS.");
    
    for(int i=0;i<n+1;i++)
    {
        printf("%d ",arr[i]);
    }
}
***********************DELETE AN ELEMENT
#include <stdio.h>
int pos;
int DeleteElement(int arr[],int n,int k)
{
    for(int j=0;j<n;j++)
    {
        if(arr[j]==k)
        {
            pos=j;
        }
    }
    printf("\n");
    printf("Index of the element to be deleted is -%d",pos);
    printf("\n");
    
    for(int i=pos;i<n-1;i++)
    {
        arr[i]=arr[i+1];
    }    
}
int main()
{
     int arr[] = { 12, 34, 10, 6 ,60 ,88 ,4 };
     
     // Using a last element as search element
    int n=sizeof(arr)/sizeof(arr[0]);
    int key = 6;
    
    printf("OG ARRAY IS.");
    
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
    DeleteElement(arr,n,key);
    
    printf("NEW ARRAY IS.");
    
    for(int i=0;i<n-1;i++)
    {
        printf("%d ",arr[i]);
    }
}
******************** CHECK IS ARRAY SORTED RECURSIVE APPROACH
#include <stdio.h>
int arraySortedOrNot(int arr[],int n)
{
    static int i;
    if(n==0 || n==1)
    {
        return 1;
    }
    //if above condiiton fails then last pair was sorted , keep on recursive calls    
    return arr[n-1]>=arr[n-2] && arraySortedOrNot(arr,n-1);    

ORR  // Unsorted pair found (Equal values allowed)
    if (arr[n - 1] < arr[n - 2])
        return 0;

    // Last pair was sorted
    // Keep on checking
    return arraySortedOrNot(arr, n - 1);
}
int main()
{
    int arr[] = { 20, 23, 23, 45, 50, 88 };
    int n = sizeof(arr) / sizeof(arr[0]);
    if (arraySortedOrNot(arr, n))
        printf("Yes\n");
    else
        printf("No\n");       
        
}
****************************REVERSE AN ARRAY
#include <stdio.h>
int ReverseArr(int arr[],int n)
{
    int start=0,end=n-1,temp;    
    while(start<=end)
    {
        temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        start++;
        end--;
    }    
}
void PrintArr(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }    
}
int main()
{
    int arr[] = { 20, 23, 3, 45, 50, 88 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Before reversing.");
    PrintArr(arr,n);
    printf("\n");
    ReverseArr(arr,n);
    printf("After reversing.");
    PrintArr(arr,n);             
}
==============RECURSIVE APPROACH
#include <stdio.h>
int ReverseArr(int arr[],int n,int start, int end)
{   
    int temp;    
    if(start>end)
    {
        return 0;
    }
    while(start<=end)
    {
        temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        start++;
        end--;
    }
    return ReverseArr(arr,n-1,start++,end--);    
}
void PrintArr(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }    
}
int main()
{
    int arr[] = { 20, 23, 3, 45, 50, 88 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Before reversing.");
    PrintArr(arr,n);
    printf("\n");    
    ReverseArr(arr,n,0,n-1);
    printf("After reversing.");
    PrintArr(arr,n);    
}
**********************SECOND LARGEST ELEMENT
#include <stdio.h>
int SecondLargest(int arr[],int n)
{   
   int max=arr[0],pos; 
   for(int i=1;i<n;i++)
   {
       if(arr[i]>max)
       {
           max=arr[i];
           pos=i;
       }
   }
   printf("%d ",pos);
   int i=0;
   int sec_largest=0;
   for( i=1;i<n;i++)
   {
       if(i!=pos)
       {
           if(arr[i]>arr[sec_largest])
           {
               sec_largest=i;
           }
       }
   }
   return sec_largest;
}
int main()
{
    int arr[] = {20, 23, 88, 5, 50, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int result=SecondLargest(arr,n);     
    printf("%d",arr[result]);
}
