SOME CODE EX. OF SWITCH CASE--
# include <stdio.h>
int main()
{
   int i = 0;   
     switch(i)
     {
       default:
         i += 4;
         //break;
        case 0:
         i += 5;
         //break;
       case 1:
         i += 2;
       case 5:
         i += 5;
       
         break;
     }
     printf("%d  ", i);  
} ANS == 12  
IF WE CHANGE i to 10, then output is 26
So, if no case matches the switch , default is executed its placement in the switch doesnt matter, also,if no break is given all the 
cases after the one executed will be also executed. 


==========CODES
PROBLEM
char* utility(int n) {
    // write your code here
    if(n%2==0)
    {
        char *s="Friend";
        char *ptr=s;
        return ptr;
    }
    else
    {
        char *s1="You";
        char *ptr2=s1;
        return ptr2;
    }
} WHEN output needs to be returned in string format here, output will be You or Friend
................................
QUIZES
#include <stdio.h>
int main()
{
    int i = 1024;
    for (; i; i >>= 1)
        printf("GeeksQuiz");
    return 0;
} In for loop, mentioning expression is optional. >>= is a composite operator. It shifts the binary representation of the value by 1 to
the right and assigns the resulting value to the same variable. The for loop is executed until value of variable i doesn't drop to 0.
.............
#include <stdio.h>
#define PRINT(i, limit) do \\
                        { \\
                            if (i++ < limit) \\
                            { \\
                                printf("GeeksQuiz\\n"); \\
                                continue; \\
                            } \\
                        }while(0);

int main()
{
    int i = 0;
    PRINT(i, 3);
    return 0;
}
.............
#include <stdio.h>
int main() {
    int i = 3;
    switch (i) {
        case 1:
            printf("Geeks");
            break;
        case 1+2:
            printf("Quiz");
            break;
        default:
            printf("GeeksQuiz");
    }
    return 0;
} Quiz
..............
#include <stdio.h>

#define EVEN 0
#define ODD 1

int main() {
    int i = 3;
    switch (i % 2) {
        case EVEN:
            printf("Even");
            break;
        case ODD:
            printf("Odd");
            break;
        default:
            printf("Default");
    }
    return 0;
} Odd
.............
#include <stdio.h>
int main() {
    int i;
    if (printf("0"))
        i = 3;
    else
        i = 5;
    printf("%d", i);
    return 0;
} 0 3 --- anything inside if is executed.
...........
#include<stdio.h>
int main()
{
   int n;
   for (n = 9; n!=0; n--)
     printf("n = %d", n--);
   return 0;
} INFINITE LOOP

............
# include <stdio.h>
int main()
{
   int i = 0;
   for (i=0; i<20; i++)
   {
     switch(i)
     {
       case 0:
         i += 5;
       case 1:
         i += 2;
       case 5:
         i += 5;
       default:
         i += 4;
         break;
     }
     printf("%d  ", i);
   }
   return 0;
}  16 21
................
#include <stdio.h>
int main()
{
    char check = 'a';
    switch (check)
    {
        case 'a' || 1: printf("Geeks ");
        
        case 'b' || 2: printf("Quiz ");
                    break;
        default: printf("GeeksQuiz");
    }
    return 0;
} compile time error , duplicate case values
...................
#include <stdio.h>
int main()
{
    char check = 'a';
    switch (check)
    {
        case printf("%d",printf("GEG")): printf("Geeks ");
        
        case 'b' || 2: printf("Quiz ");
                    break;
        default: printf("GeeksQuiz");
    }
    return 0;
} error: case label does not reduce to an integer constant
    7 |         case printf("%d",printf("GEG")): printf("Geeks ");
      |         ^~~~
...........................
#include <stdio.h>
int main()
{
    int check = 20, arr[] = {10, 20, 30};
    switch (check)
    {
        case arr[0]: printf("Geeks ");
        case arr[1]: printf("Quiz ");
        case arr[2]: printf("GeeksQuiz");
    }
    return 0;
} case label does not reduce to int constant is flased.
............................
int main() {
    if(a>b)
    if(b>c)
    s1;
    else s2;
    } s2 is executed if a>b and b<=c;
OUTER IF STATEMENT HAS SCOPE TILL THE END OF INNER IF-ELSE STATEMENTS,IN ORDER TO EXECUTE S2, A>B MUST BE TRUE SO THE CONTROL ENTERS INNER BLOCK AND 
B>C MUST BE FLASE SO B<=C MUST BE TRUE.
===============================QUIZES DONE
