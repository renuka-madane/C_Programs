






==============CODES / QUIZES
#include <stdio.h>

int main()
{
	int arr[5];
	
	// Assume that base address of arr is 2000 and size of integer
        // is 32 bit
	arr++;
	printf("%u", arr);
	
	return 0;
} array name in C is implemented by constant pointer, its not possible to apply increment and decrement on constant types.
................
#include <stdio.h>

int main()
{
    int arr[5];
    // Assume base address of arr is 2000 and size of integer is 32 bit
    printf("%u %u", arr + 1, &arr + 1);

    return 0;
} Name of array in C gives the address(except in sizeof operator) of the first element. Adding 1 to this address gives the address plus
the sizeof type the array has. Applying the Address-of operator before the array name gives the address of the whole array.
Adding 1 to this address gives the address plus the sizeof whole array.
.......................
int *A [10], B[10][10];  https://gateoverflow.in/893/gate-cse-2003-question-2
.............
int main()
{
    int i;
    int arr[5] = {0};
    for (i = 0; i <= 5; i++)
        printf("%d ", arr[i]);
    return 0;
}  https://gateoverflow.in/153774/c-programming
...............
#include<stdio.h>
int main()
{
    int a[10][20][30] = {0};
    a[5][2][1] = 2;
    return 0;
}  https://gateoverflow.in/45932/prog-which-of-the-following-will-print-the-value-2-for-the-above-code
...............
#include <stdio.h>
#define SIZE(arr) sizeof(arr) / sizeof(*arr);
void fun(int* arr, int n)
{
    int i;
    *arr += *(arr + n - 1) += 10;
}

void printArr(int* arr, int n)
{
    int i;
    for(i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

int main()
{
    int arr[] = {10, 20, 30};
    int size = SIZE(arr);
    fun(arr, size);
    printArr(arr, size);
    return 0;
} The crux of the question lies in the expression: *arr += *(arr + n - 1) += 10; The composite operator (here +=) has right to left associativity. 
First 10 is added to the last element of the array. The result is then added to the first element of the array.
.........
# include <stdio.h>
int main ()
{
        int i, j;
        char a [2] [3] = {{'a', 'b', 'c'}, {'d', 'e', 'f'}};
        char b [3] [2];
        char *p = *b;
        for (i = 0; i < 2; i++) {
              for (j = 0; j < 3; j++) {
              *(p + 2*j + i) = a [i] [j];
              }
        }
} ---->> https://gateoverflow.in/3362/gate-it-2008-question-52
...........
#include <stdio.h>

int main()
{
   int i, j;
        char a [2] [3] = {{'a', 'b', 'c'}, {'d', 'e', 'f'}};
        char *ptr=*a;
        printf("%p %c",ptr+2,*(ptr+2));
} 0x7ffdad1912d4 c
..............
#include <stdio.h>
int main ()    {
    int sum = 0, maxsum = 0,  i,  n = 6;
    int a [] = {2, -2, -1, 3, 4, 2};
    for (i = 0; i < n; i++)    {
            if (i == 0 || a [i]  < 0  || a [i] < a [i - 1])  {
                     if (sum > maxsum) maxsum = sum;
                     sum = (a [i] > 0) ? a [i] : 0;
            }
            else sum += a [i];
    }
    if (sum > maxsum) maxsum = sum ;
    printf ("%d\\n", maxsum);

} ans - 7
.....................
#include <stdio.h>
int main ()
{
        int i, j;
        int a [8] = {1, 2, 3, 4, 5, 6, 7, 8};
        for(i = 0; i < 3; i++) {
             a[i] = a[i] + 1;
             i++;
             printf ("%d\n", i);
        }
        printf ("%d, %d\n", i, a[i]);
        i--;
        printf ("%d, %d\n", i, a[i]);
        for (j = 7; j > 4; j--) {
              int i = j/2;
              a[i] = a[i] - 1;
        }
        printf ("%d\n", j);
        printf ("%d, %d", i, a[i]);
}
 /* Add code here. Remove these lines if not writing code */
====================PROBLEMS
Array Traversal Reverse
 for(int i=(size-1);i>=0;i--)
    {
        printf("%d ",numbers[i]);
    }
.............
ARRAY SRCH
 // Iterate over the array elements
    for (int i = 0; i < n; i++) {
        // Check if the current element is equal to 'x'
        if (arr[i] == x)
            return i; // Return the index if element is found
    }
    return -1; // Return -1 if element is not found
............Check if array is sorted
 for(int i=0;i<n-1;i++)
    {
        if(arr[i]>arr[i+1])
        {
            return false;
        }
        
        
    }
    return true;
................COUNT ZEROES
 int count=0;
    
    for(int i=0;i<n;i++)
    {
        if(arr[i]==0)
        {
            count++;
        }
    }
    return count;
ORR
// write code here
    int i = 0;
    while(i<n && arr[i]!=0)
    {
        i++;
    }
    return (n-i);
...............Average
 //Write your code to find average of positive numbers in numbers array
    //return the answer
    int i=0,count=0;
    double sum=0;
    
    for(i=0;i<size;i++)
    {
        if(numbers[i]>=0)
        {
            sum=sum+numbers[i];
            count++;
        }
        
    }
    double avg=sum/count;
    return avg;
...............Find distinct element
// User function Template for C

int distinct(int arr[], int n) {

    // code here
    int i, j, count = 0, distinict = 1;
    for(int i=0; i<n; i++)
    {
        distinict = 1;
        for(int j=i-1; j>=0; j--)
        {
            if(arr[i]==arr[j])
            {
                distinict = 0;
                break;
            }
        }
        if(distinict == 1)
        {
            count++;
        }
    }
    return count;
}
