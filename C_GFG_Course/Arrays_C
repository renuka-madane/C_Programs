






==============CODES / QUIZES
#include <stdio.h>

int main()
{
	int arr[5];
	
	// Assume that base address of arr is 2000 and size of integer
        // is 32 bit
	arr++;
	printf("%u", arr);
	
	return 0;
} array name in C is implemented by constant pointer, its not possible to apply increment and decrement on constant types.
................
#include <stdio.h>

int main()
{
    int arr[5];
    // Assume base address of arr is 2000 and size of integer is 32 bit
    printf("%u %u", arr + 1, &arr + 1);

    return 0;
} Name of array in C gives the address(except in sizeof operator) of the first element. Adding 1 to this address gives the address plus
the sizeof type the array has. Applying the Address-of operator before the array name gives the address of the whole array.
Adding 1 to this address gives the address plus the sizeof whole array.
.......................
int *A [10], B[10][10];  https://gateoverflow.in/893/gate-cse-2003-question-2
.............
int main()
{
    int i;
    int arr[5] = {0};
    for (i = 0; i <= 5; i++)
        printf("%d ", arr[i]);
    return 0;
}  https://gateoverflow.in/153774/c-programming
...............
#include<stdio.h>
int main()
{
    int a[10][20][30] = {0};
    a[5][2][1] = 2;
    return 0;
}  https://gateoverflow.in/45932/prog-which-of-the-following-will-print-the-value-2-for-the-above-code
...............
#include <stdio.h>
#define SIZE(arr) sizeof(arr) / sizeof(*arr);
void fun(int* arr, int n)
{
    int i;
    *arr += *(arr + n - 1) += 10;
}

void printArr(int* arr, int n)
{
    int i;
    for(i = 0; i < n; ++i)
        printf("%d ", arr[i]);
}

int main()
{
    int arr[] = {10, 20, 30};
    int size = SIZE(arr);
    fun(arr, size);
    printArr(arr, size);
    return 0;
} The crux of the question lies in the expression: *arr += *(arr + n - 1) += 10; The composite operator (here +=) has right to left associativity. 
First 10 is added to the last element of the array. The result is then added to the first element of the array.
.........
# include <stdio.h>
int main ()
{
        int i, j;
        char a [2] [3] = {{'a', 'b', 'c'}, {'d', 'e', 'f'}};
        char b [3] [2];
        char *p = *b;
        for (i = 0; i < 2; i++) {
              for (j = 0; j < 3; j++) {
              *(p + 2*j + i) = a [i] [j];
              }
        }
} ---->> https://gateoverflow.in/3362/gate-it-2008-question-52
