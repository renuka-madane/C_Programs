====================FIND EQUAL OR NOT USING BITWISE==================
#include <stdio.h>
int main()
{
   int num1=18,num2=18;
   int result=num1^num2;   
   if(result==0)
   {
       printf("Equal.");
   }
   else
   {
       printf("NOT Equal.");
   }  
}
====================FIND EVEN/ODD 
int main()
{
   int num1=18;
   if((num1&1)==0)
   {
       printf("Even.");
   }
   else
   {
       printf("ODD.");
   }   
}
========================SWAP NOS.
#include <stdio.h>
int main()
{
   int num1=2,num2=5;
   num1=num1^num2;
   num2=num1^num2;
   num1=num1^num2; ORR
	//Write your code here
    int result;
    result=a^b;
    a=result^a;
    b=result^b;
   printf("%d %d",num1,num2);
}
===============================COUNT SET BITS IN INT
#include <stdio.h>
int main()
{   int num=15,count=0;   
   while(num)
   {
       if(num&1)
       {
           count++;
       }
       num>>=1;
   }
   printf("%d",count);   
}
================= Clear the Rightmost Set Bit of a Number
#include <stdio.h>
int main()
{
   int num=15;
   printf("%d",num&(num-1));   
}
============================= (Count Set Bits)
#include <stdio.h>
int main()
{
   int num=10,count=0;   
   while(num)
   {
       if((num&1)==1)
       {
           count++;
       }
       num>>=1;
   }   
   printf("%d",count);   
}
=========================== Enable Nth Bit of a Number
#include <stdio.h>

int main()
{
    int num=64,pos=8;
    
    int num2=1<<(pos-1);
    
    printf("%d",num|num2);
    return 0;
}
====================== Check Nth Bit is Set or Unset
int main()
{
    int num=12,pos=5; // 12 in bin os 1100
    
    int mask=1<<(pos-1);
    int result=num&mask;
    
    if(result)
    {
         printf("ON.");
    }
=================
#include <stdio.h>

int main()
{
    int num=6; // 12 in bin os 1100
    int mask=num>>1;
    int result=(num^mask)+1;
    
    if((result&(result-1))==0)
    {
        printf("Has alternate bits.");
    }
    else
    {
        printf("Doesnt have alt bits.");
    }
    return 0;
}
    else
    {
        printf("OFF.");
    }
   
    return 0;
}
====================== Toggle Nth Bit of a Number


#include <stdio.h>

int main()
{
    int num=65,pos=6; // 12 in bin os 1100
    
    int mask=1<<(pos-1);
    int result=num^mask;
    
     printf("%d",result);
   
    return 0;
}
====================Check if a Number is a Power of 2
#include <stdio.h>

int main()
{
    int num=15; // 12 in bin os 1100
    
    if((num&(num-1))==0)
    {
        printf("IS A POWER OF 2.");
    }
    else
    {
        printf("IS NOT A POWER OF 2.");
    }
    return 0;
}
=================== Check if the Number Has Alternate Bit Pattern
#include <stdio.h>
int main()
{
    int num=6; // 12 in bin os 1100
    int mask=num>>1;
    int result=(num^mask)+1;
    
    if((result&(result-1))==0)
    {
        printf("Has alternate bits.");
    }
    else
    {
        printf("Doesnt have alt bits.");
    }
    return 0;
}
======================== Find the Odd Occuring Numbers Using Bitwise
#include <stdio.h>
int main()
{
    int arr[]={1,3,5,1,3,5,8};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=arr[0];
    for(int i=1;i<n;i++)
    {
        result=result^arr[i];
    }
    printf("%d",result);    
}
======================  Two Single Numbers
#include <stdio.h>
int main()
{
    int arr[]={5,9,6,9,15,6};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=arr[0];
    for(int i=1;i<n;i++)
    {
        result=result^arr[i];
    }
    int mask=1;    
    while(result)
    {
        if((result&mask)==0)
        {
            mask<<=1;
        }
        else
        {
            break;
        }
    }
    int result1=0,result2=0;    
    for(int i=0;i<n;i++)
    {
        if(mask&arr[i])
        {
            result1=result1^arr[i];
        }
        else
        {
            result2=result2^arr[i];
        }
    }       
    printf("%d %d",result1,result2);    
}
===============================Find the Missing Number
#include <stdio.h>

int main()
{
    int arr[]={1,2,4,5,6};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=arr[0];
    for(int i=1;i<n;i++)
    {
        result=result^arr[i];
    }
     for(int i=1;i<=(n+1);i++)
    {
        result=result^i;
        
    }
    printf("%d",result);
}
