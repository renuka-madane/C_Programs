
================Binary representation of a given number
#include <stdio.h>
void getBinaryRep(unsigned n)
{
    char arr[32]={'0'};
    int i=31;
    
    while(i>=0)
    {
    if(n&1)
    {
        arr[i]='1';
    }
    else
    {
        arr[i]='0';
    }
    n=n>>1;
    i--;
    }
    
    printf("%s",arr);
}
int main()
{
   int n=12;
   getBinaryRep(n);
}
============================
#include <stdio.h>
int findPosition(int num)
{
    int pos=1,mask=1;
    
    while((num&mask)== 0)
    {
        mask<<=1;
        pos++;
    }
    
    printf("%d",pos);
}
int main()
{
    int n=2;
    
    findPosition(n);
}
==================== Check for Integer Overflow
#include <stdio.h>
int addOvf(int n1,int n2)
{
    int sum=n1+n2;
    
    if((n1>0)&&(n2>0)&&(sum<0))
    {
        return -1;
    }
    
    return sum;
    
}
int main()
{
     int a = 1000000000, b = 1000000000;
    
    printf("%d",addOvf(a,b));
}  ORRRR
int addOvf(int n1,int n2)
{
    int sum=n1+n2;
    //check for pos overflow
    if((n1>=0)&&(n2>=0)&&(n1>INT_MAX-n2))
    {
        return -1;
    }
    else  if((n1<=0)&&(n2<=0)&&(n1<INT_MAX-n2))
    {
         return -1;
    }
    
    return sum;
    
}
int main()
{
     int a = -5000000000, b = -3000000000;
    
    printf("%d",addOvf(a,b));
}
In C, INT_MAX is a macro defined in the <limits.h> header file that represents the maximum possible value for a variable of type int.
Its value is 2,147,483,647 (231 - 1) for 32-bit systems, which are the most common nowadays. It's important to include <limits.h> to use INT_MAX.

==========================Detect if two integers have opposite signs
int haveOppositeSigns(int n1,int n2)
{
    return (n1<0)?(n2>=0):(n2<0);    
}
int main()
{
      int a = -5, b = -810;
    
    if(haveOppositeSigns(a,b))
    {
        printf("OPP SIGNS.");
    }
    else
    {
         printf("SAME SIGNS.");
    }    
    
}  ORR
#include <stdio.h>
int haveOppositeSigns(int n1,int n2)
{
   int xor=n1^n2;   
   xor>>=31;
   return xor;    
}
int main()
{
      int a = -5, b = 10;
    
    if(haveOppositeSigns(a,b))
    {
        printf("OPP SIGNS.");
    }
    else
    {
         printf("SAME SIGNS.");
    }    
}  ORR
#include <stdio.h>
int haveOppositeSigns(int n1,int n2)
{
   long long product=(long long)n1*n2;
    return product<0;
}
int main()
{
      int a = -5, b = -10;
    
    if(haveOppositeSigns(a,b))
    {
        printf("OPP SIGNS.");
    }
    else
    {
         printf("SAME SIGNS.");
    }
    
}
============Check if two numbers are equal without using arithmetic and comparison operators
#include <stdio.h>
int areSame(int n1,int n2)
{
   
    return (n1^n2)==0;
}
int main()
{
      int a = 15, b = 18;
    
    if(areSame(a,b))
    {
        printf("ARE SAME.");
    }
    else
    {
         printf("NOT SAME.");
    }
    
}
