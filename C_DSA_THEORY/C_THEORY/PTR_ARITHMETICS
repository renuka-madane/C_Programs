If an integer pointer that stores address 1000 is incremented, then it will increment by 4(size of an int), and the new address will point to 1004.
While if a float type pointer is incremented then it will increment by 4(size of a float) and the new address will be 1004.

1 -- Increment/Decrement of a Pointer --->If an integer pointer that stores address 1000 is incremented, then it will increment by 4(size of an int), 
and the new address will point to 1004. While if a float type pointer is incremented then it will increment by 4(size of a float) and the new address will be 1004.
OR
If an integer pointer that stores address 1000 is decremented, then it will decrement by 4(size of an int), and the new address will point 
to 996. While if a float type pointer is decremented then it will decrement by 4(size of a float) and the new address will be 996.

2-Addition of Integer to Pointer ---> ptr is an integer pointer that stores 1000 as an address. If we add integer 5 to it using the expression,
ptr = ptr + 5, then, the final address stored in the ptr will be ptr = 1000 + sizeof(int) * 5 = 1020.

3-Subtraction  of Integer to Pointer --- ptr is an integer pointer that stores 1000 as an address. If we subtract integer 5 from it using the 
expression, ptr = ptr – 5, then, the final address stored in the ptr will be ptr = 1000 – sizeof(int) * 5 = 980.

4. Subtraction of Two Pointers --> The subtraction of two pointers is possible only when they have the same data type. 
The result is generated by calculating the difference between the addresses of the two pointers and calculating how many bits of data it 
is according to the pointer data type.The subtraction of two pointers gives the increments between the two pointers. 
For Example: 
Two integer pointers say ptr1(address:1000) and ptr2(address:1004) are subtracted. The difference between addresses is 4 bytes.
Since the size of int is 4 bytes, therefore the increment between ptr1 and ptr2 is given by (4/4) = 1.
5. Comparison of Pointers --> C >, >=, <, <=, ==, !=.

// declaring pointer to array name
    int* ptr1 = &arr;
    // declaring pointer to first element
    int* ptr2 = &arr[0];
    if (ptr1 == ptr2) {
        printf("Pointer to Array Name and First Element "
               "are Equal.");
    }
    else {
        printf("Pointer to Array Name and First Element "
               "are not Equal.");
    }
6-- A pointer can be compared or assigned a NULL value irrespective of what is the pointer type.Such pointers are called NULL
pointers and are used in various pointer-related error-handling methods.
int* ptr = NULL;
    if (ptr == NULL) {
        printf("The pointer is NULL");
    }
if an array is named arr then arr and &arr[0] can be used to reference the array as a pointer.
int Even_Odd_Count(int *ptr,int n)
{
    
    int count_even=0,count_odd=0;
    int i;
    for(i=0;i<n;i++)
    {
        if(*ptr%2==0)
        {
            count_even++;
        }
        else
        {
            count_odd++;
        }
        ptr++;
    }
    
    printf("%d\n",count_even);
    printf("%d",count_odd);
    
}

int main()
{
    int arr[]={ 1, 2, 3, 4, 5, 6, 22, 8, 40, 10 };
    
    int n=sizeof(arr)/sizeof(arr[0]);
    int *p1=arr;
    
    Even_Odd_Count(p1,n);
    
}
