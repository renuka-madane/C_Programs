Function Declarations -- return_type name_of_the_function (parameter_1, parameter_2);  The parameter name is not mandatory while declaring functions. We can also declare the function without using the name of the data variables.

A function in C must always be declared globally before calling it.

Function Definition -- return_type function_name (para1_type para1_name, para2_type para2_name)
{
    // body of the function
}

Function Call
We use the function name and parameters in the function call.  Function call is neccessary to bring the program control to the function definition. If not called, the function statements will not be executed.
Function Return Type -->> Function return type tells what type of value is returned after all function is executed. When we don’t want to return a value, we can use the void data type.
Only one value can be returned from a C function. To return multiple values, we have to use pointers or structures.

Function Arguments   int function_name(int var1, int var2);
Exiting the function is the final step where all the allocated memory to the variables, functions, etc is destroyed before giving full control back to the caller.
Pass by Value -->> Parameter passing in this method copies values from actual parameters into formal function parameters. As a result, 
any changes made inside the functions do not reflect in the caller’s parameters. 
Pass by Reference -->> The caller’s actual parameters and the function’s actual parameters refer to the same locations, 
so any changes made inside the function are reflected in the caller’s actual parameters. 

C Function Prototype
return_type function_name (type1 arg1, type2 arg2, ... typeN argN); OR return_type function_name (type1 , type2 , ... typeN);

C Function Definition
return_type function_name (type1 arg1, type2 arg2 .... typeN argN) {

    // actual statements to be executed
    // return value if any
}

C Function Call -->> function_name(arg1, arg2, ... argN);
Return Value  --->> return (expression);

return_type function_name(parameter_list);

In C, if we do not specify a return type, compiler assumes an implicit return type as int.
If a reference of a function is passed to another function as an argument to call it, then it will be called a Callback function.

nested function, it is treated as lexical scoping. Lexical scoping is not valid in C because the compiler cant reach/find the correct memory location of the inner function.
The _Noreturn keyword appears in a function declaration and specifies that the function does not return by executing the return statement or by reaching the end of the function body. 
This specifier is typically used through the convenience macro noreturn, which is provided in the header stdnoreturn.h.

FUNCTIONS CODE --
#include <stdio.h>
float sum(float , float);
int main()
{
	float add=sum(10,55.5);
	
	printf(" the sum of these nos. is -- %f",add);
	
	
	
}

float sum(float a, float b)
{
	printf("%f",a+b);
		return a+b;
	
	
	
}
65.500000 the sum of these nos. is -- 65.500000

PASS BY REFERENCE
#include <stdio.h>

int swap(int *num1, int *num2,int *num3);


int main()
{
	int a=20,b=50,temp=60;
	
	printf("Before swap Value of a and b is: %d, %d\n",a,b);
	swap(&a,&b,&temp);
	printf("After swap Value of a and b is: %d, %d",a,b);
	
		
}

int swap(int *num1, int *num2,int *num3)
{
	int b=55;
	int *temp;
	temp=&b;
	printf("%d\n",*temp);
	printf("%d\n%d\n%d",*num1,*num2,*num3);
	*temp=*num1;
	printf("%d\n",*temp);
	*num1=*num2;
	*num2=*temp;	
	
}

***********************
###Returning multiple values Using pointers:
#include <stdio.h>

int GreaterNum(int num1,int num2,int *add_grt,int *add_small);

int main()
{	
	int x,y,grt,smaller;	
	printf("Enter two numbers: \n");
    scanf("%d%d", &x, &y);
    GreaterNum(x,y,&grt,&smaller);
	
printf("\nThe greater number is %d and the smaller number is %d",
           grt, smaller);		
}

int GreaterNum(int num1,int num2,int *add_grt,int *add_small)
{
	if(num1>num2)
	{		
		*add_grt=num1;		
		*add_small=num2;
	}
	else
	{		
		*add_grt=num2;		
		*add_small=num1;
	}		
}

*****************************************************
#include <stdio.h>

struct GreaterNum
{
	int greater;
	int smaller;
	
};

typedef struct GreaterNum Struct;

Struct FindGrt(int , int);
 
int main()
{
	
	int x,y;
	Struct result;
	
	printf("Enter two numbers: \n");
    scanf("%d%d", &x, &y);
    
    result=FindGrt(x,y);
	
printf("\nThe greater number is %d and the smaller number is %d",
           result.greater,result.smaller);		
}

Struct FindGrt(int num1, int num2)
{
	Struct s;
	
	if(num1>num2)
	{
		
		s.greater=num1;
		
		s.smaller=num2;
	}
	else
	{
		
		s.greater=num2;
		
		s.smaller=num1;
	}
	
	return s;
}
**************************************

#include <stdio.h>


int FindGrt(int , int , int arr[]);
 
int main()
{
	
	int x,y, arr[2];
	
	
	printf("Enter two numbers: \n");
    scanf("%d%d", &x, &y);
    
    FindGrt(x,y,arr);
	
printf("\nThe greater number is %d and the smaller number is %d",arr[0],arr[1]);

		   		
}

int FindGrt(int num1, int num2,int arr[])
{
	
	
	if(num1>num2)
	{
		
		arr[0]=num1;
		
		arr[1]=num2;
	}
	else
	{
		
		arr[0]=num2;
		
		arr[1]=num1;
	}
	
}

**************************
Callbacks in C--------

#include <stdio.h>

void func_a(void);

void func_b(void (*ptr)());
 
int main()
{
	
	void (*func_ptr)()=&func_a;
	
	func_b(func_ptr);
		   		
}

void func_b(void (*ptr)())
{
	(*ptr)();	
}

void func_a(void)
{
	
	
	printf("I am function A");
}
