Pointer to an Array | Array Pointer
A pointer to an array is a pointer that points to the whole array instead of the first element of the array. 
It considers the whole array as a single unit instead of it being a collection of given elements.

Syntax of Pointer to Array
type(*ptr)[size];
 the difference between the pointer to an array and pointer to the first element of an array.
**********************************
int main()
{
    int arr[]={ 1, 2, 3, 4, 5 };
    
    int *ptr=arr; //ptr that points to the 0th element of the array.
    
    printf("%d",ptr);
}

***********************
#include <stdio.h>
WARNING warning: initialization of ‘int (*)[5]’ from incompatible pointer type ‘int *’ [-Wincompatible-pointer-types]
   15 |     int (*ptr)[5]=arr; //ptr that points to the 0th element of the array.
int main()
{
    int arr[]={ 1, 2, 3, 4, 5 };
    
    int (*ptr)[5]=arr; //ptr that points to the 0th element of the array.
    also wrong --  int (*ptr)[5]=&arr[0];
    printf("%p",ptr);
}

***********************************
CORRECT WAY --
#include <stdio.h>
int main()
{
    int arr[]={ 1, 2, 3, 4, 5 };
    CORRECT WAY --
    int (*ptr)[5]=&arr; //ptr is pointer that points to an array of 5 integers.    
    printf("%p",ptr);
}

Pointer to the First Element of Array vs Pointer to Array
int main()
{
    int arr[5] = {1, 2, 3, 4, 5};

    // Create a pointer to integer
    int *ptr; //The base type of p is int
    
     // Pointer to an array of 5 integers
     int (*p1)[5];  // while base type of ptr is ‘an array of 5 integers’.
     // Points to 0th element of the arr
     ptr=arr;
     
     // Points to the whole array arr
     p1=&arr;
     
     //printing the base addresses
     printf("%p\n",*p1);
     printf("%d\n",*ptr);
     printf("%p\n",p1);
     printf("%p\n",ptr);
     
     // incrementing both pointers
     ptr++;
     p1++;
     printf("After INCR %p\n",*p1);
     printf("%d\n",*ptr);
     printf("%p\n",p1);
     printf("%p",ptr);
}

To define a pointer to a 2D array, both the number of rows and columns of the array must be specified in the pointer declaration.
type *(ptr)[row][cols] or type *(ptr)[depth][row][cols]

**************************
constant pointer, pointers to constant, and constant pointers to constants
Pointers to constant:
int main()
{
    int a=10;
    int b=20;
    int c=60;
    
    const int *p1=&a;
    int *p2=&b;
    int*p3=&c;
    *p1=88;  // error: assignment of read-only location ‘*p1’
   20 |     *p1=88;
    printf("%d",*p1);
    
}
constant pointers

#include <stdio.h>

int main()
{
    int a=10;
    int b=20;
    int c=60;
    
     int *const p1=&a;
     p1=&b; //error: assignment of read-only variable ‘p1’
   18 |      p1=&b;
    int *p2=&b;
    int*p3=&c;
    *p1=88;
    printf("%d",*p1);
    *****************************
int main()
{
    int a=10;
    int b=20;
    int c=60;
    
     const int *const p1=&a;
     p1=&b;
    int *p2=&b;
    int*p3=&c;
    *p1=88;
    printf("%d",*p1);
    
}
error: assignment of read-only variable ‘p1’
   18 |      p1=&b;
      |        ^
main.c:21:8: error: assignment of read-only location ‘*(const int *)p1’
   21 |     *p1=88;
}

