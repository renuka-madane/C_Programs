LEC 1 - DISPLAY BASIC SINGLY LL

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 
OUTPUT--
original address of nodes on the stack
0x7ffd0b5fa898
0x7ffd0b5fa8a0
0x7ffd0b5fa8a8
0x7ffd0b5fa8b0
0x7ffd0b5fa8b8
=========================
printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 
OUTPUT--
Address saved in the nodes returned from the heap.
0x5ebbc1cc32a0
0x5ebbc1cc32c0
0x5ebbc1cc32e0
0x5ebbc1cc3300
0x5ebbc1cc3320
==============================
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n",temp->data,temp->next);
        temp=temp->next;
    }    
    
}
**********************************************
LEC 2 RECURSIVE CALL
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};

void TraverseLL(struct node *ptr);
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 
printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 


    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    
    struct node *temp=head;
    //struct node **temp=&head;
    //TraverseLL(*temp);
    TraverseLL(temp);    
}

void TraverseLL(struct node *ptr)
{    
    if(ptr==0)
    {
        return;
    }    
    printf("%d\n%p\n",ptr->data,ptr->next);
        //ptr=ptr->next;    
    TraverseLL(ptr->next);    
}
***********************************************************
LEC 7 - ADD NEW NODE AT END OF LL

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

//Adding a node at the end of LL.
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};

 

void TraverseLL(struct node *ptr);

int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 
printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 


    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    
    struct node *temp=head;
    //struct node **temp=&head;
    //TraverseLL(*temp);
    TraverseLL(temp);      
    struct node *new_node=malloc(sizeof(struct node));
    new_node->data=66;
    new_node->next=0;
    
    struct node *t1=head;    
    while(t1!=0 && t1->next != 0 )
    {
        t1=t1->next;
    }    
    t1->next=new_node;    
    TraverseLL(temp);     
}
void TraverseLL(struct node *ptr)
{    
    if(ptr==0)
    {
        return;
    }    
    printf("%d\n%p\n",ptr->data,ptr->next);
        //ptr=ptr->next;        
    TraverseLL(ptr->next);    
}
***************************************************************************
LEC 6 - ADD NEW NODE AT START OF LL

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
}; 
void TraverseLL(struct node *ptr);
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 
printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    
    struct node *new_node=malloc(sizeof(struct node));
    new_node->data=85;
    new_node->next=head;
    head=new_node;    
    struct node *temp=head;
    //struct node **temp=&head;
    //TraverseLL(*temp);
    TraverseLL(temp);      
}

void TraverseLL(struct node *ptr)
{    
    if(ptr==0)
    {
        return;
    }    
    printf("%d\n%p\n",ptr->data,ptr->next);
        //ptr=ptr->next;    
        
    TraverseLL(ptr->next);    
}
*******************************************************************************
DELETING 1ST NODE OF SLL.

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
}; 
void TraverseLL(struct node *ptr);
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 
printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;    
    struct node *new_node=malloc(sizeof(struct node));
    new_node->data=85;
    new_node->next=head;
    head=new_node;    
    struct node *temp=head;
    //struct node **temp=&head;
    //TraverseLL(*temp);
    printf(" The original SLL.\n");
    TraverseLL(temp);    
    
    struct node *t2=head;
    head=head->next;
    free(t2);
    printf("After deleting the 1st node.\n");
    TraverseLL(head);    
}

void TraverseLL(struct node *ptr)
{    
    if(ptr==0)
    {
        return;
    }    
    printf("%d\n%p\n",ptr->data,ptr->next);
        //ptr=ptr->next; 
        
    TraverseLL(ptr->next);    
}
******************************************
DELETE NODE AT END OF LINKED LIST.

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
}; 

void TraverseLL(struct node *ptr);

int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 
printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    
    struct node *new_node=malloc(sizeof(struct node));
    new_node->data=85;
    new_node->next=head;
    head=new_node;    
    struct node *temp=head;
    //struct node **temp=&head;
    //TraverseLL(*temp);
    printf(" The original SLL.\n");
    TraverseLL(head); 
    
    printf("Code for deleting nodes.\n");
    
    //If the list has only one node delete it and return NULL.
    
    while(head->next==0)
    {
        free(head);
        
    }
    
    //struct node *temp=head;
    struct node *previous;
    
    // else traverse to the last node
  while (temp->next->next != NULL)
    {
      // store previous link node as we need to change its next val
      //previous = temp;
      temp = temp->next;
    }
  // Curr assign 2nd last node's next to Null
  //previous->next = 0;
  // delete the last node
  
  free(temp->next);
  temp->next=0;
  // 2nd last now becomes the last node
    
    printf("After deleting last node.\n");
    TraverseLL(head);
}

void TraverseLL(struct node *ptr)
{    
    if(ptr==0)
    {
        return;
    }    
    printf("%d\n%p\n",ptr->data,ptr->next);
        //ptr=ptr->next;    
        
    TraverseLL(ptr->next);    
}
****************************************************************
FIND THE DATA FROM THE SLL -- ITERATIVE CODE

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n",temp->data,temp->next);
        temp=temp->next;
    } 
    
    struct node *var=head;
    
    while(var->next !=0 )
    {
        if(var->data==30)
        {
            printf("node with data as 30 is found.\n");
        }
        var=var->next;
    }
    
}
*******************************************************************************
FIND THE DATA FROM THE SLL -- RECURSIVE CODE

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};

int FindNode(struct node *head,int var);

int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n",temp->data,temp->next);
        temp=temp->next;
    }     
    FindNode(head,30);    
}
int FindNode(struct node *head,int var)
{
    struct node *t1=head;
    
    if(t1->next==0)
    {
        return;
    }
    if(t1->data==var)
    {
        printf("Node with data as 30 is found.\n");
        return;
    }    
    FindNode(t1->next,var);    
}

**************************************************************
REVERSE A LL -- ITERATIVE
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};

int ReverseLL(struct node *head);

int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n",temp->data,temp->next);
        temp=temp->next;
    }    
    printf("After reverse LL.\n");
    ReverseLL(head);    
}
int ReverseLL(struct node *head)
{
        
        struct node *prev=NULL,*Next=NULL,*curr=head;
       
       while(curr!=NULL)
       {
            Next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=Next;
       }
       head=prev;
       //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n",temp->data,temp->next);
        temp=temp->next;
    }  
        
}
*********************************************************

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
};

void ReverseLL(struct node *head);

int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    head->next=mid1;
    mid1->next=mid2;
    mid2->next=mid3;
    mid3->next=last;
    last->next=0;
    //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n",temp->data,temp->next);
        temp=temp->next;
    }    
    printf("After reverse LL.\n");
    ReverseLL(head);    
}

void ReverseLL(struct node *head)
{        
       if(head==NULL)
       {
           return ;
       }
        ReverseLL(head->next);        
        printf("%d ",head->data);      
        
        
}
