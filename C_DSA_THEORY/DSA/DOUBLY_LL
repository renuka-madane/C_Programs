DISPALY A DOUBLY LL -BASIC CODE

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
    struct node *prev; //to hold address of prev node
};
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 
    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;    
    printf("Assigning references of the nodes.\n");
    head->prev=NULL;
    head->next=mid1;
    mid1->prev=head;
    mid1->next=mid2;
    mid2->prev=mid1;
    mid2->next=mid3;
    mid3->prev=mid2;
    mid3->next=last;
    last->prev=mid2;
    last->next=NULL;
    //TRAVERSING THE LL
    struct node *temp=head;    
    while(temp != 0)
    {
        printf("%d\n%p\n%p\n",temp->data,temp->prev,temp->next);
        temp=temp->next;
    }    
      
}
*********************************************************************
ADD NEW NODE AT BEG. OF DLL

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
    struct node *prev; //to hold address of prev node
};



int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    printf("OG LL --Assigning references of the nodes.\n");
    head->prev=NULL;
    head->next=mid1;
    mid1->prev=head;
    mid1->next=mid2;
    mid2->prev=mid1;
    mid2->next=mid3;
    mid3->prev=mid2;
    mid3->next=last;
    last->prev=mid2;
    last->next=NULL;
    struct node *temp=head;

while(temp!=NULL)
{
     printf("%d\n%p\n%p\n",temp->data,temp->prev,temp->next);
     temp=temp->next;

}
    
    printf("After adding new node at beg. \n");
    struct node *newNode = (struct node *) malloc (sizeof (struct node));

  newNode->data = 66;    
   
   if(head != NULL)
   {
       newNode->next = head;
        newNode->prev = NULL;
       
       head->prev=newNode;
       head=newNode;
   }  

struct node *temp2=head;
while(temp2!=NULL)
{
     printf("%d\n%p\n%p\n",temp2->data,temp2->prev,temp2->next);
     temp2=temp2->next;
}      
}
**********************************************************
ADD NEW NODE AT END OF DLL
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
    struct node *prev; //to hold address of prev node
};
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;   
    
    head->prev=NULL;
    head->next=mid1;
    mid1->prev=head;
    mid1->next=mid2;
    mid2->prev=mid1;
    mid2->next=mid3;
    mid3->prev=mid2;
    mid3->next=last;
    last->prev=mid2;
    last->next=NULL;

printf("The OG LL.\n");
    struct node *temp=head;

while(temp!=NULL)
{
     printf("%d\n%p\n%p\n",temp->data,temp->prev,temp->next);
     temp=temp->next;
}    
    printf("After adding new node at the end of the OG LL. \n");
    struct node *newNode = (struct node *) malloc (sizeof (struct node));
    struct node *current=head;
  newNode->data = 88;   
   while(current->next != NULL)
   {
       current=current->next;
   }
newNode->next=NULL;
newNode->prev=current;
current->next=newNode;
struct node *temp2=head;

while(temp2!=NULL)
{
     printf("%d\n%p\n%p\n",temp2->data,temp2->prev,temp2->next);
     temp2=temp2->next;
}
      
}
***************************DELETE HEAD NODE OF DLL.
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
    struct node *prev; //to hold address of prev node
};
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    printf("The OG LL.\n");
    head->prev=NULL;
    head->next=mid1;
    mid1->prev=head;
    mid1->next=mid2;
    mid2->prev=mid1;
    mid2->next=mid3;
    mid3->prev=mid2;
    mid3->next=last;
    last->prev=mid2;
    last->next=NULL;
    struct node *temp=head;

while(temp!=NULL)
{
     printf("%d\n%p\n%p\n",temp->data,temp->prev,temp->next);
     temp=temp->next;

}    
    printf("After deleting head of the OG DLL. \n");    
    struct node *t2=head;
    head->next->prev=NULL;
    head=head->next;
    free(t2);
struct node *temp2=head;
while(temp2!=NULL)
{
     printf("%d\n%p\n%p\n",temp2->data,temp2->prev,temp2->next);
     temp2=temp2->next;
}
      
}
********************************DELETE LAST NODE OF DLL , METHOD 1

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node // Create structure for node in LL.
{
    int data; //int type of data to old information
    struct node *next; //to hold address of next node
    struct node *prev; //to hold address of prev node
};
int main()
{
    //declare pointers of type struct node,memory will be allotted in the stack
    struct node *head,*mid1,*mid2,*mid3,*last;
    //we use malloc function to allocate memory dynamically with the size of struct node
    //memory will be allocated in heap section and its address 
    head=malloc(sizeof(struct node));
    mid1=malloc(sizeof(struct node));
    mid2=malloc(sizeof(struct node));
    mid3=malloc(sizeof(struct node));
    last=malloc(sizeof(struct node));
    
printf("original address of nodes on the stack\n");
printf("%p\n%p\n%p\n%p\n%p\n",&head,&mid1,&mid2,&mid3,&last); 

printf("Address saved in the nodes returned from the heap.\n");
printf("%p\n%p\n%p\n%p\n%p\n",head,mid1,mid2,mid3,last); 

    head->data=10;
    mid1->data=20;
    mid2->data=30;
    mid3->data=40;
    last->data=50;
    
    printf("The OG LL.\n");
    head->prev=NULL;
    head->next=mid1;
    mid1->prev=head;
    mid1->next=mid2;
    mid2->prev=mid1;
    mid2->next=mid3;
    mid3->prev=mid2;
    mid3->next=last;
    last->prev=mid2;
    last->next=NULL;
    struct node *temp=head;

while(temp!=NULL)
{
     printf("%d\n%p\n%p\n",temp->data,temp->prev,temp->next);
     temp=temp->next;

}    
    printf("After deleting last node of the OG DLL. \n");    
    struct node *t2=head;
    
    while(t2->next->next != NULL)
    {
        t2=t2->next;
    }
    struct node *curr=t2->next->next;
    
    t2->next=NULL;
    free(curr);
    
    struct node *temp2=head;
while(temp2!=NULL)
{
     printf("%d\n%p\n%p\n",temp2->data,temp2->prev,temp2->next);
     temp2=temp2->next;
}
      
}

OR=============
printf("After deleting last node of the OG DLL. \n");    
    struct node *t2=head;
    
    while(t2->next != NULL)
    {
        printf("%d \n",t2->data);
        t2=t2->next;
        
    }
    
    if(t2->next==NULL)
    {
        t2->prev->next=NULL;
        free(t2);
    }
    
    
    
    struct node *temp2=head;
while(temp2!=NULL)
{
     printf("%d\n%p\n%p\n",temp2->data,temp2->prev,temp2->next);
     temp2=temp2->next;
}
OR=============
